[{"/opt/lampp/htdocs/pages/todoapp/src/reportWebVitals.js":"1","/opt/lampp/htdocs/pages/todoapp/src/index.js":"2","/opt/lampp/htdocs/pages/todoapp/src/App.js":"3","/opt/lampp/htdocs/pages/todoapp/src/components/TaskRow.js":"4","/opt/lampp/htdocs/pages/todoapp/src/components/TaskBanner.js":"5","/opt/lampp/htdocs/pages/todoapp/src/components/AddTask.js":"6"},{"size":362,"mtime":1611843126691,"results":"7","hashOfConfig":"8"},{"size":568,"mtime":1611843798465,"results":"9","hashOfConfig":"8"},{"size":6805,"mtime":1612367755574,"results":"10","hashOfConfig":"8"},{"size":7928,"mtime":1612367899980,"results":"11","hashOfConfig":"8"},{"size":156,"mtime":1612367491794,"results":"12","hashOfConfig":"8"},{"size":5516,"mtime":1612365464263,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1gj3vur",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/opt/lampp/htdocs/pages/todoapp/src/reportWebVitals.js",[],["30","31"],"/opt/lampp/htdocs/pages/todoapp/src/index.js",[],["32","33"],"/opt/lampp/htdocs/pages/todoapp/src/App.js",[],["34","35"],"/opt/lampp/htdocs/pages/todoapp/src/components/TaskRow.js",["36","37"],"/opt/lampp/htdocs/pages/todoapp/src/components/TaskBanner.js",[],"/opt/lampp/htdocs/pages/todoapp/src/components/AddTask.js",["38","39","40","41"],"import React, { useState } from 'react';\n\n//Material UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport MuiAlert from '@material-ui/lab/Alert';\n//Icons\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\n\n//Colors\nimport blue from '@material-ui/core/colors/blue';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n} \n\nconst useStyles = makeStyles((theme) => ({\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      borderRadius: '5px',\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport const AddTask = props => {\n\n    // styles\n    const classes = useStyles();\n\n    const [newTaskName, setNewTaskName] = useState('');\n    const [newTaskDesc, setNewTaskDesc] = useState('');\n    const [show, setShow] = useState(false);\n    const [required, setRequired] = useState('required');\n  \n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const [open, setOpen] = useState(false); //Modal\n    const handleOpenModal = () => { setOpen(true) };\n    const handleCloseModal = () => { setOpen(false) };\n\n    const updateNewTaskName = e => {\n        setNewTaskName(e.target.value);\n        newTaskName.length > 1 ? setRequired('required') : setRequired('show-required');\n    };\n    const updateNewTaskDesc = e => setNewTaskDesc(e.target.value);\n\n    const creatNewTask = () => {\n        props.callback(newTaskName, newTaskDesc);\n        if(newTaskName === ''){\n            setRequired('show-required');\n        }else{\n            setNewTaskName('');\n            setNewTaskDesc('');\n            handleCloseModal();\n        }\n    };\n    \n    return (\n\n        <div>\n            <Button onClick={handleOpenModal} className=\"container-header\">\n                <AddCircleOutlineIcon style={{color: blue[800]}}/> <span className=\"ml-2 mt-1\" style={{color: blue[800], fontWeight: 'bold'}}>Add Task</span>\n            </Button>\n\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className={classes.modal}\n                open={open}\n                onClose={handleCloseModal}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                timeout: 500,\n                }}\n            >\n                <Fade in={open}>\n                <div className={classes.paper}>\n                    <form>\n                        <h4 class=\"little-bold pb-3 mb-4 new-task\">New Task</h4>\n                        <div className=\"form-group\">\n                            <label>Title (Required)</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-controll\"\n                                value={newTaskName}\n                                onChange={updateNewTaskName}\n                                required\n                            />\n                            <span id='required' className={required}>Required</span>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Description</label>\n                            <textarea\n                                cols=\"30\"\n                                rows=\"5\"\n                                value={newTaskDesc}\n                                onChange={updateNewTaskDesc}\n                            >\n                            </textarea>\n                        </div>\n                        <button\n                            type=\"button\"\n                            className='mr-3 float-right btn btn-blue btn-save'\n                            onClick={creatNewTask}\n                        >\n                            Save\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"mr-3 float-right btn btn-gray btn-cancel\"\n                            onClick={handleCloseModal}\n                        >\n                            Cancel\n                        </button>\n                    </form>\n                    {/* <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                        <Alert\n                            onClose={handleCloseSnackbar}\n                            severity='success'\n                        >\n                            Task updated\n                        </Alert>\n                    </Snackbar> */}\n                </div>\n                </Fade>\n            </Modal>\n\n        {/* <div className=\"my-1\">\n            <TextField\n                variant=\"outlined\"\n                label=\"Add a Task\"\n                type=\"text\"\n                multiline\n                rowsMax={10}\n                className=\"form-controll col-9\"\n                value={newTaskName}\n                onChange={updateNewTaskValue}\n                required\n            />\n            <Button color=\"primary\" className=\"mt-2\" onClick={creatNewTask}>\n                Add\n            </Button>\n        </div> */}\n\n        </div>\n\n    );\n}",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"42","replacedBy":"46"},{"ruleId":"44","replacedBy":"47"},{"ruleId":"42","replacedBy":"48"},{"ruleId":"44","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":20,"column":12,"nodeType":"52","messageId":"53","endLine":20,"endColumn":24},{"ruleId":"50","severity":1,"message":"54","line":51,"column":15,"nodeType":"52","messageId":"53","endLine":51,"endColumn":34},{"ruleId":"50","severity":1,"message":"55","line":16,"column":10,"nodeType":"52","messageId":"53","endLine":16,"endColumn":15},{"ruleId":"50","severity":1,"message":"56","line":41,"column":12,"nodeType":"52","messageId":"53","endLine":41,"endColumn":16},{"ruleId":"50","severity":1,"message":"57","line":44,"column":11,"nodeType":"52","messageId":"53","endLine":44,"endColumn":22},{"ruleId":"50","severity":1,"message":"58","line":45,"column":11,"nodeType":"52","messageId":"53","endLine":45,"endColumn":21},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],["59"],["60"],["59"],["60"],"no-unused-vars","'openSnackbar' is assigned a value but never used.","Identifier","unusedVar","'handleCloseSnackbar' is assigned a value but never used.","'Alert' is defined but never used.","'show' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleShow' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]