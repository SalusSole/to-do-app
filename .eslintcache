[{"/opt/lampp/htdocs/pages/todoapp/src/reportWebVitals.js":"1","/opt/lampp/htdocs/pages/todoapp/src/index.js":"2","/opt/lampp/htdocs/pages/todoapp/src/App.js":"3","/opt/lampp/htdocs/pages/todoapp/src/components/TaskRow.js":"4","/opt/lampp/htdocs/pages/todoapp/src/components/TaskBanner.js":"5","/opt/lampp/htdocs/pages/todoapp/src/components/AddTask.js":"6","/opt/lampp/htdocs/pages/todoapp/src/components/TaskCompleted.js":"7"},{"size":362,"mtime":1611843126691,"results":"8","hashOfConfig":"9"},{"size":568,"mtime":1611843798465,"results":"10","hashOfConfig":"9"},{"size":3658,"mtime":1611937866640,"results":"11","hashOfConfig":"9"},{"size":5643,"mtime":1611931732764,"results":"12","hashOfConfig":"9"},{"size":356,"mtime":1611932907147,"results":"13","hashOfConfig":"9"},{"size":1023,"mtime":1611928647574,"results":"14","hashOfConfig":"9"},{"size":794,"mtime":1611930582647,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1gj3vur",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/opt/lampp/htdocs/pages/todoapp/src/reportWebVitals.js",[],["35","36"],"/opt/lampp/htdocs/pages/todoapp/src/index.js",[],["37","38"],"/opt/lampp/htdocs/pages/todoapp/src/App.js",[],"/opt/lampp/htdocs/pages/todoapp/src/components/TaskRow.js",["39"],"import React, {useState} from 'react';\n//Material UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '@material-ui/core/Card';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TextField from '@material-ui/core/TextField';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}  \n\n\nconst useStyles = makeStyles((theme) => ({\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\n\n\nexport const TaskRow = props => {\n\n    const [openSnackbar, setOpenSnackbar] = useState(false);\n\n    const handleClickSnackbar = () => {\n        setOpenSnackbar(true);\n    };\n\n    const handleCloseSnackbar = (event, reason) => {\n        if (reason === 'clickaway') {\n        return;\n        }\n\n        setOpenSnackbar(false);\n    };\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    \n      const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n      };\n    \n      const handleCloseMenu = () => {\n        setAnchorEl(null);\n      };\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n\n    const [updateTaskName, setUpdateTaskName] = useState(props.task.name);\n    const updateNewTaskValue = e => setUpdateTaskName(e.target.value);\n\n    const [updateTaskDone, setUpdateTaskDone] = useState(props.task.done);\n    const updateNewTaskDone = e => setUpdateTaskDone(e.target.value);\n  \n    const handleOpen = () => {\n      setOpen(true);\n    };\n  \n    const handleClose = () => {\n      setOpen(false);\n    };\n\n    const deleteTask = () => {\n        props.callback(props.task);\n        // console.log(props.task);\n    }\n    const updateTask = () => {\n        handleClose();\n        props.updateTask(props.task, updateTaskName, updateTaskDone);\n        handleClickSnackbar();\n        // console.log(updateTaskName);\n    }\n\n    return(\n        <Card key={props.task.name} className=\"my-3\" style={{background: '#fffa73'}}>\n            <CardContent>\n                <Checkbox\n                    type=\"checkbox\"\n                    checked={props.task.done}\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                    onChange={() => props.toggleTask(props.task)}\n                    />\n                <span className=\"task-name\" onClick={() => console.log(\"Hola mindp\")}> {props.task.name} </span>\n                <IconButton\n                    className=\"float-right mr-3\"\n                    aria-label=\"more\"\n                    aria-controls=\"long-menu\"\n                    aria-haspopup=\"true\"\n                    onClick={handleClick}\n                >\n                    <MoreVertIcon />\n                </IconButton>\n                <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleCloseMenu}\n                >\n                    <MenuItem onClick={deleteTask}>Delete</MenuItem>\n                    <MenuItem onClick={handleOpen}>Edit</MenuItem>\n                </Menu>\n                <Modal\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className={classes.modal}\n                    open={open}\n                    onClose={handleClose}\n                    closeAfterTransition\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                    timeout: 500,\n                    }}\n                >\n                    <Fade in={open}>\n                    <div className={classes.paper}>\n                        <h2 id=\"transition-modal-title\">Details</h2>\n                        <TextField\n                            variant=\"outlined\"\n                            label=\"Edit Task\"\n                            multiline\n                            rowsMax={10}\n                            type=\"text\"\n                            id=\"transition-modal-description\"\n                            className=\"form-controll\"\n                            value={updateTaskName}\n                            onChange={updateNewTaskValue}\n                        />\n                        <Button\n                            className='p-3 text-success'\n                            onClick={updateTask}\n                        >\n                            Ok\n                        </Button>\n                    </div>\n                    </Fade>\n                </Modal>\n            </CardContent>\n            <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert\n                    onClose={handleCloseSnackbar}\n                    severity='success'\n                >\n                    Task updated\n                </Alert>\n            </Snackbar>\n        </Card>\n    );\n}","/opt/lampp/htdocs/pages/todoapp/src/components/TaskBanner.js",[],"/opt/lampp/htdocs/pages/todoapp/src/components/AddTask.js",["40"],"import React, { useState } from 'react';\nimport { TextValidator } from 'react-material-ui-form-validator'\n\n//Material UI\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nexport const AddTask = props => {\n\n    const [newTaskName, setNewTaskName] = useState('')\n\n    const updateNewTaskValue = e => setNewTaskName(e.target.value);\n\n    const creatNewTask = () => {\n        props.callback(newTaskName);\n        setNewTaskName('');\n    };\n    \n    return (\n        <div className=\"my-1\">\n            <TextField\n                variant=\"outlined\"\n                label=\"Add a Task\"\n                type=\"text\"\n                multiline\n                rowsMax={10}\n                className=\"form-controll col-9\"\n                value={newTaskName}\n                onChange={updateNewTaskValue}\n                required\n            />\n            <Button color=\"primary\" className=\"mt-2\" onClick={creatNewTask}>\n                Add\n            </Button>\n        </div>\n    );\n}","/opt/lampp/htdocs/pages/todoapp/src/components/TaskCompleted.js",[],["41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"43","replacedBy":"47"},{"ruleId":"45","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":71,"column":11,"nodeType":"51","messageId":"52","endLine":71,"endColumn":28},{"ruleId":"49","severity":1,"message":"53","line":2,"column":10,"nodeType":"51","messageId":"52","endLine":2,"endColumn":23},{"ruleId":"43","replacedBy":"54"},{"ruleId":"45","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],["56"],["57"],"no-unused-vars","'updateNewTaskDone' is assigned a value but never used.","Identifier","unusedVar","'TextValidator' is defined but never used.",["56"],["57"],"no-global-assign","no-unsafe-negation"]