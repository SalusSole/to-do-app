[{"/opt/lampp/htdocs/pages/todoapp/src/reportWebVitals.js":"1","/opt/lampp/htdocs/pages/todoapp/src/index.js":"2","/opt/lampp/htdocs/pages/todoapp/src/App.js":"3","/opt/lampp/htdocs/pages/todoapp/src/components/TaskRow.js":"4","/opt/lampp/htdocs/pages/todoapp/src/components/TaskBanner.js":"5","/opt/lampp/htdocs/pages/todoapp/src/components/AddTask.js":"6","/opt/lampp/htdocs/pages/todoapp/src/components/TaskCompleted.js":"7"},{"size":362,"mtime":1611843126691,"results":"8","hashOfConfig":"9"},{"size":568,"mtime":1611843798465,"results":"10","hashOfConfig":"9"},{"size":3658,"mtime":1611939574164,"results":"11","hashOfConfig":"9"},{"size":6932,"mtime":1611957691180,"results":"12","hashOfConfig":"9"},{"size":356,"mtime":1611932907147,"results":"13","hashOfConfig":"9"},{"size":958,"mtime":1611939325717,"results":"14","hashOfConfig":"9"},{"size":568,"mtime":1611954967667,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1gj3vur",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/opt/lampp/htdocs/pages/todoapp/src/reportWebVitals.js",[],["34","35"],"/opt/lampp/htdocs/pages/todoapp/src/index.js",[],["36","37"],"/opt/lampp/htdocs/pages/todoapp/src/App.js",[],["38","39"],"/opt/lampp/htdocs/pages/todoapp/src/components/TaskRow.js",["40"],"import React, {useState} from 'react';\n//Material UI\nimport { makeStyles } from '@material-ui/core/styles';\n// Inputs\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\n//Menu\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n//Icons\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded';\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\n//core\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Snackbar from '@material-ui/core/Snackbar';\n//lab\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n} \n\nconst useStyles = makeStyles((theme) => ({\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\n\n\nexport const TaskRow = props => {\n    \n    // States\n    const [openSnackbar, setOpenSnackbar] = useState(false); //Snackbar\n    const [anchorEl, setAnchorEl] = React.useState(null); //Modal\n    const [updateTaskName, setUpdateTaskName] = useState(props.task.name); //Tasks\n    const [open, setOpen] = useState(false); //Menu\n\n    // styles\n    const classes = useStyles();\n\n    // functions\n        //set state by task updated \n        // ***********************************************************************\n        const updateNewTaskValue = e => setUpdateTaskName(e.target.value);\n        //set state by tasks\n        // ***********************************************************************\n        const [updateTaskDone, setUpdateTaskDone] = useState(props.task.done);\n        //Snackbar \n        // *******************************************************************\n        const handleClickSnackbar = () => {\n            setOpenSnackbar(true);\n        };\n        const handleCloseSnackbar = (event, reason) => {\n            if (reason === 'clickaway') {\n                return;\n            }\n            setOpenSnackbar(false);\n        };\n        //Modal\n        // ***********************************************************************\n        const handleClick = (event) => { setAnchorEl(event.currentTarget) };\n        const handleCloseMenu = () => { setAnchorEl(null) };\n        //Menu\n        // ***********************************************************************\n        const handleOpen = () => { setOpen(true) };\n        const handleClose = () => { setOpen(false) };\n        //Delete task \n        // ***********************************************************************\n        const deleteTask = () => {\n            props.callback(props.task);\n        }\n        //Update task \n        // ***********************************************************************\n        const updateTask = () => {\n            handleClickSnackbar();\n            handleClose();\n            props.updateTask(props.task, updateTaskName, updateTaskDone);\n        }\n\n    return(\n        <div key={props.task.name} className=\"my-3 shadow rounded px-3 pt-3 pb-1\" style={{}}>\n            <div className=\"row px-3\">\n            <span\n                    className=\"col-12 align-self-center task-name\"\n                    onClick={() => console.log(\"Hola mindp\")}\n                >\n                    {props.task.name}\n                </span>\n            </div>\n            <div className=\"\">\n                <FormControlLabel\n                    className=\"ml-2 align-self-start\"\n                    type=\"checkbox\"\n                    checked={props.task.done}\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                    onChange={() => props.toggleTask(props.task)}\n                    control={\n                        <Checkbox \n                            icon={<CheckCircleOutlineRoundedIcon/>}\n                            checkedIcon={<CheckCircleRoundedIcon/>}\n                            name=\"checkedH\"\n                        />\n                    }\n                />\n                <IconButton\n                    className=\"float-right align-self-start\"\n                    aria-label=\"more\"\n                    aria-controls=\"long-menu\"\n                    aria-haspopup=\"true\"\n                    onClick={handleClick}\n                >\n                    <MoreVertIcon />\n                </IconButton>\n            </div>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleCloseMenu}\n            >\n                <MenuItem onClick={deleteTask}>Delete</MenuItem>\n                <MenuItem onClick={handleOpen}>Edit</MenuItem>\n            </Menu>\n            <Modal\n                aria-labelledby=\"transition-modal-title\"\n                aria-describedby=\"transition-modal-description\"\n                className={classes.modal}\n                open={open}\n                onClose={handleClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                timeout: 500,\n                }}\n            >\n                <Fade in={open}>\n                <div className={classes.paper}>\n                    <h2 id=\"transition-modal-title\">Details</h2>\n                    <TextField\n                        variant=\"outlined\"\n                        label=\"Edit Task\"\n                        multiline\n                        rowsMax={10}\n                        type=\"text\"\n                        id=\"transition-modal-description\"\n                        className=\"form-controll\"\n                        value={updateTaskName}\n                        onChange={updateNewTaskValue}\n                    />\n                    <Button\n                        className='p-3 text-success'\n                        onClick={updateTask}\n                    >\n                        Ok\n                    </Button>\n                    <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                        <Alert\n                            onClose={handleCloseSnackbar}\n                            severity='success'\n                        >\n                            Task updated\n                        </Alert>\n                    </Snackbar>\n                </div>\n                </Fade>\n            </Modal>\n        </div>\n    );\n}","/opt/lampp/htdocs/pages/todoapp/src/components/TaskBanner.js",[],"/opt/lampp/htdocs/pages/todoapp/src/components/AddTask.js",[],"/opt/lampp/htdocs/pages/todoapp/src/components/TaskCompleted.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"41","replacedBy":"45"},{"ruleId":"43","replacedBy":"46"},{"ruleId":"41","replacedBy":"47"},{"ruleId":"43","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":61,"column":32,"nodeType":"51","messageId":"52","endLine":61,"endColumn":49},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],["53"],["54"],["53"],["54"],"no-unused-vars","'setUpdateTaskDone' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]